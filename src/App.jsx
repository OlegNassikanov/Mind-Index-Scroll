import React, { useState, useRef } from 'react';

const CognitiveNavigationDemo = () => {
  const [isIndexOpen, setIsIndexOpen] = useState(false);
  const [activeSection, setActiveSection] = useState(null);
  const [dragStart, setDragStart] = useState(null);
  const [indexPosition, setIndexPosition] = useState({ x: 0, y: 0 });
  const [selectedTopic, setSelectedTopic] = useState(null);
  const chatContainerRef = useRef(null);

  // –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
  const chatMessages = [
    { id: 1, type: 'user', text: '–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', section: 'intro' },
    { id: 2, type: 'ai', text: '–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤...', section: 'intro' },
    { id: 3, type: 'user', text: '–ö–∞–∫–∏–µ –µ—Å—Ç—å —Ç–∏–ø—ã ML?', section: 'types' },
    { id: 4, type: 'ai', text: '–°—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–∞ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è: –æ–±—É—á–µ–Ω–∏–µ —Å —É—á–∏—Ç–µ–ª–µ–º, –±–µ–∑ —É—á–∏—Ç–µ–ª—è –∏ –æ–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º...', section: 'types' },
    { id: 5, type: 'user', text: '–û–±—ä—è—Å–Ω–∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏', section: 'neural' },
    { id: 6, type: 'ai', text: '–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ ‚Äî —ç—Ç–æ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏, –≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏...', section: 'neural' },
    { id: 7, type: 'user', text: '–ö–∞–∫ –ø—Ä–∏–º–µ–Ω—è—Ç—å –≤ –±–∏–∑–Ω–µ—Å–µ?', section: 'business' },
    { id: 8, type: 'ai', text: '–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –±–∏–∑–Ω–µ—Å —á–µ—Ä–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...', section: 'business' },
    { id: 9, type: 'user', text: '–ü–æ–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞', section: 'code' },
    { id: 10, type: 'ai', text: '–í–æ—Ç –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –Ω–∞ Python:\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression...', section: 'code' }
  ];

  const mindIndex = [
    { id: 'intro', title: 'üéØ –û—Å–Ω–æ–≤—ã ML', description: '–í–≤–µ–¥–µ–Ω–∏–µ –≤ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', messages: [1, 2] },
    { id: 'types', title: 'üîÄ –¢–∏–ø—ã –æ–±—É—á–µ–Ω–∏—è', description: '–í–∏–¥—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è', messages: [3, 4] },
    { id: 'neural', title: 'üß† –ù–µ–π—Ä–æ—Å–µ—Ç–∏', description: '–ü—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π', messages: [5, 6] },
    { id: 'business', title: 'üíº –ë–∏–∑–Ω–µ—Å-–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ', description: '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∫–µ–π—Å—ã', messages: [7, 8] },
    { id: 'code', title: '‚ö° –ö–æ–¥ –∏ –ø—Ä–∏–º–µ—Ä—ã', description: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è', messages: [9, 10] }
  ];

  // --- –ñ–µ—Å—Ç–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (—Ç–∞—á—Å–∫—Ä–∏–Ω) ---
  const handleTouchStart = (e) => {
    const touch = e.touches[0];
    setDragStart({ x: touch.clientX, y: touch.clientY, time: Date.now() });
  };

  const handleTouchMove = (e) => {
    if (!dragStart) return;
    const touch = e.touches[0];
    const deltaY = touch.clientY - dragStart.y;
    const timeDelta = Date.now() - dragStart.time;

    if (timeDelta > 500 && Math.abs(deltaY) > 30) {
      setIsIndexOpen(true);
      setIndexPosition({ x: touch.clientX - 150, y: touch.clientY - 100 });
    }
  };

  const handleTouchEnd = () => {
    setDragStart(null);
  };

  // --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é (—Å—Ä–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞) ---
  const handleMouseDown = (e) => {
    if (e.button === 1) {
      e.preventDefault();
      setDragStart({ x: e.clientX, y: e.clientY, time: Date.now() });
    }
  };

  const handleMouseMove = (e) => {
    if (!dragStart) return;
    const deltaY = e.clientY - dragStart.y;
    const timeDelta = Date.now() - dragStart.time;

    if (timeDelta > 500 && Math.abs(deltaY) > 30) {
      setIsIndexOpen(true);
      setIndexPosition({ x: e.clientX - 150, y: e.clientY - 100 });
    }
  };

  const handleMouseUp = (e) => {
    if (dragStart && e.button === 1) {
      setDragStart(null);
    }
  };

  const jumpToSection = (sectionId) => {
    setSelectedTopic(sectionId);
    setActiveSection(sectionId);
    setIsIndexOpen(false);

    const element = document.getElementById(`section-${sectionId}`);
    if (element) element.scrollIntoView({ behavior: 'smooth' });
  };

  return (
    <div className="h-screen bg-gray-900 text-white overflow-hidden relative">
    {/* –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç */}
    <div
    ref={chatContainerRef}
    className="h-full overflow-y-auto px-4 py-6 pb-20"
    onTouchStart={handleTouchStart}
    onTouchMove={handleTouchMove}
    onTouchEnd={handleTouchEnd}
    onMouseDown={handleMouseDown}
    onMouseMove={handleMouseMove}
    onMouseUp={handleMouseUp}
    style={{ scrollBehavior: 'smooth' }}
    >
    <div className="max-w-2xl mx-auto space-y-4">
    <div className="text-center mb-8">
    <h1 className="text-2xl font-bold mb-2">üß† Cognitive Navigation Demo</h1>
    <p className="text-gray-400 text-sm">–£–¥–µ—Ä–∂–∏–≤–∞–π –ø–∞–ª–µ—Ü –∏–ª–∏ —Å—Ä–µ–¥–Ω—é—é –∫–Ω–æ–ø–∫—É –º—ã—à–∏ –∏ –ø—Ä–æ–≤–æ–¥–∏ –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑ –¥–ª—è –≤—ã–∑–æ–≤–∞ Mind Index</p>
    </div>

    {chatMessages.map((msg) => (
      <div
      key={msg.id}
      id={`section-${msg.section}`}
      className={`flex ${msg.type === 'user' ? 'justify-end' : 'justify-start'} transition-all duration-300 ${
        activeSection === msg.section ? 'ring-2 ring-blue-500 rounded-lg p-2' : ''
      }`}
      >
      <div className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
        msg.type === 'user' ? 'bg-blue-600 text-white' : 'bg-gray-700 text-gray-100'
      } ${selectedTopic === msg.section ? 'animate-pulse' : ''}`}>
      <p className="text-sm whitespace-pre-wrap">{msg.text}</p>
      </div>
      </div>
    ))}
    </div>
    </div>

    {/* Mind Index Overlay */}
    {isIndexOpen && (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" onClick={() => setIsIndexOpen(false)}>
      <div
      className="bg-gray-800 rounded-2xl p-6 max-w-sm mx-4 shadow-2xl border border-gray-600"
      style={{ transform: `translate(${indexPosition.x}px, ${indexPosition.y}px)`, animation: 'fadeInScale 0.3s ease-out' }}
      onClick={(e) => e.stopPropagation()}
      >
      <div className="flex items-center justify-between mb-4">
      <h3 className="text-lg font-semibold">üìö Mind Index</h3>
      <button onClick={() => setIsIndexOpen(false)} className="text-gray-400 hover:text-white transition-colors">‚úï</button>
      </div>

      <div className="space-y-3">
      {mindIndex.map((item) => (
        <div key={item.id} className="p-3 bg-gray-700 rounded-lg cursor-pointer hover:bg-gray-600 transition-all duration-200 transform hover:scale-105" onClick={() => jumpToSection(item.id)}>
        <div className="flex items-center justify-between">
        <div>
        <h4 className="font-medium text-sm">{item.title}</h4>
        <p className="text-xs text-gray-400 mt-1">{item.description}</p>
        </div>
        <div className="text-xs text-blue-400">{item.messages.length} msg</div>
        </div>
        </div>
      ))}
      </div>

      <div className="mt-4 pt-4 border-t border-gray-600">
      <p className="text-xs text-gray-400 text-center">üéØ –¢–∞–ø–Ω–∏ –¥–ª—è –ø—Ä—ã–∂–∫–∞ ‚Ä¢ üîÑ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è</p>
      </div>
      </div>
      </div>
    )}

    {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è */}
    <div className="fixed bottom-4 left-4 right-4 z-10">
    <div className="bg-gray-800 rounded-lg p-3 text-center shadow-lg">
    <p className="text-xs text-gray-300">
    üí° <strong>–ü–æ–ø—Ä–æ–±—É–π –∂–µ—Å—Ç –∏–ª–∏ —Å—Ä–µ–¥–Ω—é—é –∫–Ω–æ–ø–∫—É –º—ã—à–∏:</strong> —É–¥–µ—Ä–∂–∏–≤–∞–π –∏ –ø—Ä–æ–≤–æ–¥–∏ –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑
    </p>
    </div>
    </div>

    <style jsx>{`
      @keyframes fadeInScale {
        from { opacity: 0; transform: scale(0.8); }
        to { opacity: 1; transform: scale(1); }
      }
      `}</style>
      </div>
  );
};

export default CognitiveNavigationDemo;
